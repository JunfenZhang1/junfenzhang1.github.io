<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>latex-miktex-chinese</title>
    <link href="/2025/01/19/latex-miktex-chinese/"/>
    <url>/2025/01/19/latex-miktex-chinese/</url>
    
    <content type="html"><![CDATA[<p>在 MiKTeX 中使用中文需要配置 LaTeX 以支持中文排版。常用的中文支持方案包括 <strong>CTeX 宏包</strong>、<strong>XeLaTeX&#x2F;LuaLaTeX + fontspec</strong> 等。以下是详细的配置和使用方法：</p><hr><h3 id="1-使用-CTeX-宏包"><a href="#1-使用-CTeX-宏包" class="headerlink" title="1. 使用 CTeX 宏包"></a>1. <strong>使用 CTeX 宏包</strong></h3><p>CTeX 宏包是一个专门为中文排版设计的宏包，支持多种中文环境和字体。</p><h4 id="安装-CTeX-宏包"><a href="#安装-CTeX-宏包" class="headerlink" title="安装 CTeX 宏包"></a>安装 CTeX 宏包</h4><ol><li>打开 MiKTeX Console。</li><li>在 <strong>“Packages”</strong> 选项卡中搜索 <code>ctex</code>。</li><li>找到 <code>ctex</code> 宏包后，点击右侧的 <strong>“+”</strong> 按钮进行安装。</li></ol><h4 id="编写中文文档"><a href="#编写中文文档" class="headerlink" title="编写中文文档"></a>编写中文文档</h4><p>在 LaTeX 文档中使用 <code>ctex</code> 宏包，并指定文档类为 <code>ctexart</code>、<code>ctexrep</code>、<code>ctexbook</code> 或 <code>ctexbeamer</code>。例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>[UTF8]&#123;ctexart&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><span class="hljs-keyword">\title</span>&#123;中文标题&#125;<br><span class="hljs-keyword">\author</span>&#123;作者&#125;<br><span class="hljs-keyword">\date</span>&#123;<span class="hljs-keyword">\today</span>&#125;<br><span class="hljs-keyword">\maketitle</span><br><br><span class="hljs-keyword">\section</span>&#123;中文章节&#125;<br>这是一段中文内容。<br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>注意</strong>：确保文件保存为 UTF-8 编码。</li></ul><h4 id="编译文档"><a href="#编译文档" class="headerlink" title="编译文档"></a>编译文档</h4><p>使用 <strong>pdfLaTeX</strong> 编译文档：</p><ol><li>在编辑器（如 TeXworks 或 TeXstudio）中，选择编译引擎为 <strong>pdfLaTeX</strong>。</li><li>点击编译按钮，生成 PDF 文件。</li></ol><hr><h3 id="2-使用-XeLaTeX-fontspec"><a href="#2-使用-XeLaTeX-fontspec" class="headerlink" title="2. 使用 XeLaTeX + fontspec"></a>2. <strong>使用 XeLaTeX + fontspec</strong></h3><p>XeLaTeX 直接支持 Unicode 和系统字体，适合处理中文文档。</p><h4 id="安装所需宏包"><a href="#安装所需宏包" class="headerlink" title="安装所需宏包"></a>安装所需宏包</h4><ol><li>打开 MiKTeX Console。</li><li>安装以下宏包：<ul><li><code>fontspec</code>：用于加载系统字体。</li><li><code>xeCJK</code>：用于处理中日韩文字（可选，但推荐）。</li></ul></li></ol><h4 id="编写中文文档-1"><a href="#编写中文文档-1" class="headerlink" title="编写中文文档"></a>编写中文文档</h4><p>使用 <code>article</code> 文档类，并加载 <code>fontspec</code> 和 <code>xeCJK</code> 宏包。例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>&#123;article&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;fontspec&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;xeCJK&#125;<br><br><span class="hljs-keyword">\setCJKmainfont</span>&#123;SimSun&#125; <span class="hljs-comment">% 设置中文字体（例如宋体）</span><br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><span class="hljs-keyword">\title</span>&#123;中文标题&#125;<br><span class="hljs-keyword">\author</span>&#123;作者&#125;<br><span class="hljs-keyword">\date</span>&#123;<span class="hljs-keyword">\today</span>&#125;<br><span class="hljs-keyword">\maketitle</span><br><br><span class="hljs-keyword">\section</span>&#123;中文章节&#125;<br>这是一段中文内容。<br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>注意</strong>：确保文件保存为 UTF-8 编码。</li></ul><h4 id="编译文档-1"><a href="#编译文档-1" class="headerlink" title="编译文档"></a>编译文档</h4><p>使用 <strong>XeLaTeX</strong> 编译文档：</p><ol><li>在编辑器（如 TeXworks 或 TeXstudio）中，选择编译引擎为 <strong>XeLaTeX</strong>。</li><li>点击编译按钮，生成 PDF 文件。</li></ol><hr><h3 id="3-使用-LuaLaTeX-fontspec"><a href="#3-使用-LuaLaTeX-fontspec" class="headerlink" title="3. 使用 LuaLaTeX + fontspec"></a>3. <strong>使用 LuaLaTeX + fontspec</strong></h3><p>LuaLaTeX 是另一种支持 Unicode 和系统字体的方式，功能与 XeLaTeX 类似。</p><h4 id="安装所需宏包-1"><a href="#安装所需宏包-1" class="headerlink" title="安装所需宏包"></a>安装所需宏包</h4><ol><li>打开 MiKTeX Console。</li><li>安装以下宏包：<ul><li><code>fontspec</code>：用于加载系统字体。</li><li><code>luatexja</code>：用于处理中日韩文字（可选，但推荐）。</li></ul></li></ol><h4 id="编写中文文档-2"><a href="#编写中文文档-2" class="headerlink" title="编写中文文档"></a>编写中文文档</h4><p>使用 <code>article</code> 文档类，并加载 <code>fontspec</code> 和 <code>luatexja</code> 宏包。例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>&#123;article&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;fontspec&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;luatexja&#125;<br><br><span class="hljs-keyword">\setmainjfont</span>&#123;SimSun&#125; <span class="hljs-comment">% 设置中文字体（例如宋体）</span><br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><span class="hljs-keyword">\title</span>&#123;中文标题&#125;<br><span class="hljs-keyword">\author</span>&#123;作者&#125;<br><span class="hljs-keyword">\date</span>&#123;<span class="hljs-keyword">\today</span>&#125;<br><span class="hljs-keyword">\maketitle</span><br><br><span class="hljs-keyword">\section</span>&#123;中文章节&#125;<br>这是一段中文内容。<br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>注意</strong>：确保文件保存为 UTF-8 编码。</li></ul><h4 id="编译文档-2"><a href="#编译文档-2" class="headerlink" title="编译文档"></a>编译文档</h4><p>使用 <strong>LuaLaTeX</strong> 编译文档：</p><ol><li>在编辑器（如 TeXworks 或 TeXstudio）中，选择编译引擎为 <strong>LuaLaTeX</strong>。</li><li>点击编译按钮，生成 PDF 文件。</li></ol><hr><h3 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. <strong>常见问题</strong></h3><h4 id="（1）字体无法加载"><a href="#（1）字体无法加载" class="headerlink" title="（1）字体无法加载"></a>（1）<strong>字体无法加载</strong></h4><ul><li>确保系统中安装了所需的中文字体（如宋体、黑体等）。</li><li>在 Windows 中，可以通过 <code>fc-list</code> 命令查看已安装的字体：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fc-list :lang=zh<br></code></pre></td></tr></table></figure></li></ul><h4 id="（2）编译报错"><a href="#（2）编译报错" class="headerlink" title="（2）编译报错"></a>（2）<strong>编译报错</strong></h4><ul><li>确保文件保存为 UTF-8 编码。</li><li>如果使用 <code>ctex</code> 宏包，确保文档类为 <code>ctexart</code>、<code>ctexrep</code> 等。</li></ul><h4 id="（3）MiKTeX-自动安装宏包失败"><a href="#（3）MiKTeX-自动安装宏包失败" class="headerlink" title="（3）MiKTeX 自动安装宏包失败"></a>（3）<strong>MiKTeX 自动安装宏包失败</strong></h4><ul><li>手动安装所需宏包（如 <code>ctex</code>、<code>fontspec</code>、<code>xeCJK</code> 等）。</li></ul><hr><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. <strong>总结</strong></h3><ul><li><strong>CTeX 宏包</strong>：适合初学者，简单易用，支持 pdfLaTeX 编译。</li><li><strong>XeLaTeX + fontspec</strong>：支持系统字体，适合需要自定义字体的文档。</li><li><strong>LuaLaTeX + fontspec</strong>：功能与 XeLaTeX 类似，但基于 LuaTeX 引擎。</li></ul><p>根据您的需求选择合适的方案，配置完成后即可在 MiKTeX 中轻松编写和排版中文文档。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>net-notice</title>
    <link href="/2025/01/16/net-notice/"/>
    <url>/2025/01/16/net-notice/</url>
    
    <content type="html"><![CDATA[<ol><li>不知道怎么回事,再clash下网络热点如果不能上网可以这么做<ul><li>不科学上网,clash关闭tun模式,将wifi,以太网共享到热点网络</li><li>科学上网,clash开启tun模式,将tun网卡共享到热点网络</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>notice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>感悟</title>
    <link href="/2025/01/08/%E6%84%9F%E6%82%9F/"/>
    <url>/2025/01/08/%E6%84%9F%E6%82%9F/</url>
    
    <content type="html"><![CDATA[<ol><li>很多事情就是利益相关，断人财路如杀人父母，你是评不出对错的。</li><li>用得到的才去学，用不到的一般不用学。我们在大多数领域是小白。</li><li>能用能跑就不要折腾,特别是你的专业方向不是这个东西,与它的相关度小于0.75</li><li>不要想太多,可能性小的不考虑,不是自己学习工作方向的不考虑,不是自己能做的就不考虑,不要老折腾,只有自己的学习工作做完后才能折腾.如果折腾东西就折腾热门主干,不要乱折腾冷门小众细枝末节的东西.</li><li>选择要综合选择考虑你的成功率与喜好率,一般效益(成功率*收益)最大的放第一,喜好度最大放第二,这样你才能做出最明智的选择</li><li>不要拿你的业余爱好挑战别人的专业工作(比别人好,学习效率高的可能性非常之低).</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机桥接</title>
    <link href="/2025/01/06/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A1%A5%E6%8E%A5/"/>
    <url>/2025/01/06/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A1%A5%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟机桥接"><a href="#虚拟机桥接" class="headerlink" title="虚拟机桥接"></a>虚拟机桥接</h1><ol><li>有的wifi（比如我的）因为协议，硬件设计等原因，无法建立交换机，不能用hvper-v的桥接，能用vm的桥接(依然由很多问题，好像会ip冲突,虚拟机挤张宿主机的ip，导致ip变动)。有线网卡可以正常桥接。</li><li>有线网卡桥接后不能正常运行（可能？？）重启后可以。</li><li>hvper-v的default是nat（内部）模式，其他新建的nat都是dhcp，但很可能不成功，需要自己手动配</li><li>更新解决20问题，换源解决50问题，重启解决90问题，重装系统解决99问题，重买电脑解决100问题。</li><li>折腾的时间算休息时间，本质就是玩闹，不是学习，超过30min的异常不再弄了，选择主流配置，非必要的任务可以不学。</li></ol><h1 id="hvper-v的显卡与声卡问题"><a href="#hvper-v的显卡与声卡问题" class="headerlink" title="hvper-v的显卡与声卡问题"></a>hvper-v的显卡与声卡问题</h1><ol><li>显卡：windows保证版本尽量相同，linux内核要相同（要是wsl有的内核版本，但不用使用wsl的内核），编译directx内核模块，</li><li>显卡需要拷贝驱动，linux还需要添加链接库</li><li>windows声音可以解决，但linux没有声卡很难解决（vgpu不能解决，gpu直通以及其他手段才能解决）（linux几乎不需要影音需求，声音处理可以传给windows），usb窗口不能用，usb驱动器可用。</li><li>linux vgpu后必须远程桌面，自身不能加载桌面。</li><li>windows增强会话就可以共享剪贴板，驱动器，usb驱动器，linux必须远程桌面才能共享剪贴板，驱动器，usb驱动器，都不能识别usb串口</li><li>wsl不支持访问usb设备，需要自己编译内核</li></ol>]]></content>
    
    
    <categories>
      
      <category>notice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/29/hello-world/"/>
    <url>/2024/12/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>notice</title>
    <link href="/2024/12/28/notice/"/>
    <url>/2024/12/28/notice/</url>
    
    <content type="html"><![CDATA[<ol><li>做任何事情，你的本职工作才是最重要的，折腾is free，if your time  is free，本职工作没做好，折腾就是小丑，学生本职工作是学习。</li></ol><h2 id="文档，维基，github-readme"><a href="#文档，维基，github-readme" class="headerlink" title="文档，维基，github readme"></a>文档，维基，github readme</h2><p>学一个东西先看文档，小项目在readme</p><p>中型搜索文档，大型看维基（搜索 项目+docs，也有的直接放在github界面code区右上角的链接处）</p><h2 id="反代的坑"><a href="#反代的坑" class="headerlink" title="反代的坑"></a>反代的坑</h2><ol><li>nginx proxy_pass路径带&#x2F;与不带&#x2F;有重大区别，带&#x2F;可以example1&#x2F;blog-&gt;example2&#x2F;(example1&#x2F;blog&#x2F;path-&gt;example2&#x2F;path)，不带&#x2F;只能example1&#x2F;blog-&gt;example2&#x2F;blog</li><li>我部署的博客反代正常，但是跳转出现了问题，他是对&#x2F;的绝对路径，不是对于当前位置的相对路径,这种情况不要用带&#x2F;反代，在博客项目中可以调整root为&#x2F;blog&#x2F;（与反代url一致），或者直接新开一个域名（&#x2F;开始反代）</li><li>clouflare rule（origin rule）也可以反代</li></ol><h2 id="c-的坑"><a href="#c-的坑" class="headerlink" title="c++的坑"></a>c++的坑</h2><ol start="0"><li>在windows上msvc的后端汇编质量最好，mingw只能是个玩具，个人学习，个人项目以及跨平台可以用mingw，其他后端用msvc</li><li>最近在折腾c++的opencv，发现windows上cmake，vcpkg默认都是msvc工具链，如果要用mingw，需要我们修改配置为mingw工具链</li><li>官网以及scoop下载的windows的opencv，都是msvc版本，但是opencv的mingw版本与msvc版本有区别，mingw版本的需要我们手动编译才能使用</li><li>有时候动态库找不到入口，找不到动态库，编译器不对，可能是忘记添加到path以及path优先级不对（cmake生成的mingw配置文件中clang覆盖了gcc）（gcc环境重值到环境变量首位,莫名解决了dll找不到入口问题,也有可能是将动态库添加到了系统级path，提高了了动态库优先级）</li><li>如果要使用windows上的cl，第一个实在在vs中使用，第二在terminal的选项卡中用，第三是在cmd中用<br> “C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\VsDevCmd.bat” -startdir&#x3D;none -arch&#x3D;x64 -host_arch&#x3D;x64 激活（pwsh也有相应选项），第四将msvc的bin，lib，include添加到path，第5使用clang-cl替代cl兼容大部分cl编译情况。</li><li>巨坑，vcpkg安装的其他项目可以正常识别，vcpkg安装成功了msvc的opencv，但无论如何都提示找不到，不管是set vcpkg目录还是直接opencv目录,vcpkg安装mingw-oencv失败。opencv msvc（cl，clang）无论如何都安装不上，opencv，mingw可以安装成功。windows msvc好像是与vcpkg冲突了，windows是c++二等公民，c++优先linux或wsl2，编程大多数推荐linux，wsl2.</li><li>安装c，c++软件从源码编译，默认用release模式，如果安装的是编译工具，选release模式没问题，用它构建的程序可以调试，因为这个release意思是你构建这个开发的工具的过程是release，你不能调试这个过程，而不是用这个程序链接后的产品release，这个产品可以自己选择release，debug，而克隆的源代码因为我们只是使用它，不是它的开发人员（开发这个项目本身以及给他开发配套服务或者对他进行性能分析，我们只是用它开发自己的程序），用release模式，只有我们给开发这个项目本身以及给他开发配套服务或者对他进行性能分析，才用debug</li></ol>]]></content>
    
    
    <categories>
      
      <category>notice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test01</title>
    <link href="/2024/12/28/test01/"/>
    <url>/2024/12/28/test01/</url>
    
    <content type="html"><![CDATA[<h1 id="test01"><a href="#test01" class="headerlink" title="test01"></a>test01</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 确认CUDA和cuDNN是否可用</span><br><span class="hljs-keyword">assert</span> torch.cuda.is_available(), <span class="hljs-string">&quot;CUDA is not available&quot;</span><br><span class="hljs-keyword">assert</span> torch.backends.cudnn.enabled, <span class="hljs-string">&quot;cuDNN is not enabled&quot;</span><br><br><span class="hljs-comment"># 设置设备</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)<br><br><span class="hljs-comment"># 定义一个简单的卷积神经网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConvNet</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(ConvNet, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.conv1 = nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.conv2 = nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.pool = nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>        <span class="hljs-variable language_">self</span>.fc1 = nn.Linear(<span class="hljs-number">64</span> * <span class="hljs-number">8</span> * <span class="hljs-number">8</span>, <span class="hljs-number">512</span>)<br>        <span class="hljs-variable language_">self</span>.fc2 = nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = <span class="hljs-variable language_">self</span>.pool(torch.relu(<span class="hljs-variable language_">self</span>.conv1(x)))<br>        x = <span class="hljs-variable language_">self</span>.pool(torch.relu(<span class="hljs-variable language_">self</span>.conv2(x)))<br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">64</span> * <span class="hljs-number">8</span> * <span class="hljs-number">8</span>)<br>        x = torch.relu(<span class="hljs-variable language_">self</span>.fc1(x))<br>        x = <span class="hljs-variable language_">self</span>.fc2(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-comment"># 实例化网络并将其移至GPU</span><br>model = ConvNet().to(device)<br><br><span class="hljs-comment"># 定义损失函数和优化器</span><br>criterion = nn.CrossEntropyLoss()<br>optimizer = optim.Adam(model.parameters(), lr=<span class="hljs-number">0.001</span>)<br><br><span class="hljs-comment"># 生成一些随机输入和标签进行训练</span><br><span class="hljs-comment"># 假设输入是32x32的彩色图像，批量大小为64</span><br>inputs = torch.randn(<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>).to(device)<br>labels = torch.randint(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, (<span class="hljs-number">64</span>,)).to(device)<br><br><span class="hljs-comment"># 训练模型</span><br>model.train()  <span class="hljs-comment"># 设置为训练模式</span><br>start_time = time.time()  <span class="hljs-comment"># 记录开始时间</span><br>target_duration = <span class="hljs-number">300</span>  <span class="hljs-comment"># 设置目标运行时间（秒）</span><br>epochs = <span class="hljs-number">0</span>  <span class="hljs-comment"># 初始化epoch计数器</span><br>report_interval = <span class="hljs-number">1000</span>  <span class="hljs-comment"># 设置报告间隔</span><br><br><span class="hljs-comment"># 使用for循环代替while True循环</span><br><span class="hljs-keyword">while</span> time.time() - start_time &lt; target_duration:<br>    optimizer.zero_grad()  <span class="hljs-comment"># 清除旧的梯度</span><br>    outputs = model(inputs)  <span class="hljs-comment"># 前向传播</span><br>    loss = criterion(outputs, labels)  <span class="hljs-comment"># 计算损失</span><br>    loss.backward()  <span class="hljs-comment"># 反向传播</span><br>    optimizer.step()  <span class="hljs-comment"># 更新参数</span><br>    epochs += <span class="hljs-number">1</span>  <span class="hljs-comment"># 更新epoch计数器</span><br><br>    <span class="hljs-comment"># 每1000轮打印一次</span><br>    <span class="hljs-keyword">if</span> epochs % report_interval == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Epoch: <span class="hljs-subst">&#123;epochs&#125;</span>, Loss: <span class="hljs-subst">&#123;loss.item()&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 循环结束后打印结果</span><br>end_time = time.time()  <span class="hljs-comment"># 记录结束时间</span><br>elapsed_time = end_time - start_time  <span class="hljs-comment"># 计算总耗时</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Training finished. Total time: <span class="hljs-subst">&#123;elapsed_time:<span class="hljs-number">.2</span>f&#125;</span> seconds, Epochs: <span class="hljs-subst">&#123;epochs&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的网站</title>
    <link href="/2024/12/27/%E6%88%91%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <url>/2024/12/27/%E6%88%91%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="my-blog"><a href="#my-blog" class="headerlink" title="my_blog"></a>my_blog</h2><p><a href="https://junfenzhang1.github.io/" title="我的博客">我的博客</a><br><a href="https://www.318649213.xyz/" title="我的其他网站">我的其他网站</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>website</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
